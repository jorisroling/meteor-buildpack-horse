#!/bin/sh

# Meteor Heroku buildpack for Meteor 0.9.3+.

# fail fast.
set -e
# debug verbosely.
#set -x

# indent() {
#   sed -u 's/^/       /'
# }

# echo "-----> Install ImageMagick"

# BUILD_DIR=$1
# CACHE_DIR=$2
# VENDOR_DIR="$BUILD_DIR/vendor"
# INSTALL_DIR="$VENDOR_DIR/imagemagick"
# CACHE_FILE="$CACHE_DIR/imagemagick.tar.gz"


# if [ ! -f $CACHE_FILE ]; then
#   # install imagemagick
#   IMAGE_MAGICK_VERSION="${IMAGE_MAGICK_VERSION:-6.9.3-4}"
#   IMAGE_MAGICK_FILE="ImageMagick-$IMAGE_MAGICK_VERSION.tar.gz"
#   IMAGE_MAGICK_DIR="ImageMagick-$IMAGE_MAGICK_VERSION"
#   # SSL cert used on imagemagick not recognized by heroku.
#   IMAGE_MAGICK_URL="http://www.imagemagick.org/download/releases/$IMAGE_MAGICK_FILE"

#   echo "-----> Downloading ImageMagick from $IMAGE_MAGICK_URL"
#   wget $IMAGE_MAGICK_URL -P $BUILD_DIR | indent
  
#   echo "-----> Extracting ImageMagick from $BUILD_DIR/$IMAGE_MAGICK_FILE"
#   if [ ! -f $BUILD_DIR/$IMAGE_MAGICK_FILE ]; then
#     echo "Error: Unable to download ImageMagick" | indent
#     ls $BUILD_DIR | indent
#     exit 1;
#   fi
#   tar xvf $BUILD_DIR/$IMAGE_MAGICK_FILE | indent

#   echo "-----> Building ImageMagick"
#   cd $IMAGE_MAGICK_DIR
#   export CPPFLAGS="-I$INSTALL_DIR/include"
#   export LDFLAGS="-L$INSTALL_DIR/lib"
#   ./configure --prefix=$INSTALL_DIR
#   make && make install
#   cd ..
#   rm -rf $IMAGE_MAGICK_DIR

#   # cache for future deploys
#   echo "-----> Caching ImageMagick installation"
#   cd $VENDOR_DIR
#   REL_INSTALL_DIR="imagemagick"
#   tar czf $REL_INSTALL_DIR.tar.gz $REL_INSTALL_DIR
#   mv $REL_INSTALL_DIR.tar.gz $CACHE_FILE

# else
#   # cache exists, extract it
#   echo "-----> Extracting ImageMagick $CACHE_FILE => $VENDOR_DIR"
#   tar xzf $CACHE_FILE -C $VENDOR_DIR
# fi

# # update PATH and LD_LIBRARY_PATH
# echo "-----> Updating environment variables"
# PROFILE_PATH="$BUILD_DIR/.profile.d/imagemagick.sh"
# ACTUAL_INSTALL_PATH="$HOME/vendor/imagemagick"
# mkdir -p $(dirname $PROFILE_PATH)
# echo "export PATH=$ACTUAL_INSTALL_PATH/bin:\$PATH" >> $PROFILE_PATH
# echo "export LD_LIBRARY_PATH=$ACTUAL_INSTALL_PATH/lib:\$LD_LIBRARY_PATH" >> $PROFILE_PATH
























#Load config vars into environment (from https://devcenter.heroku.com/articles/buildpack-api)
export_env_dir() {
    env_dir=$1
    whitelist_regex=${2:-''}
    blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
    if [ -d "$env_dir" ]; then
	for e in $(ls $env_dir); do
	    echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
	    export "$e=$(cat $env_dir/$e)"
	    :
	done
    fi
}

export_env_dir $3

# Get the path to dir one above this file.
BUILDPACK_DIR=$(cd -P -- "$(dirname -- "$0")" && cd .. && pwd -P)
# Get the directory our app is checked out in (the "BUILD_DIR"), passed by Heroku
APP_CHECKOUT_DIR=$1
# Where the Meteor app source code is located
APP_SOURCE_DIR="$APP_CHECKOUT_DIR"

# there is no Meteor app in the root, modded by JJR (+ /App)
if [ ! -d "$APP_SOURCE_DIR/.meteor" ] && [ -d "$APP_SOURCE_DIR/App/.meteor" ]; then
  STRUCTURE_TYPE="jorisroling"
  if [ -d "$APP_SOURCE_DIR/Build" ]; then
    rm -rf "$APP_SOURCE_DIR/Build"
  fi
  if [ -d "$APP_SOURCE_DIR/Mobile" ]; then
    rm -rf "$APP_SOURCE_DIR/Mobile"
  fi
  if [ -d "$APP_SOURCE_DIR/Data" ]; then
    rm -rf "$APP_SOURCE_DIR/Data"
  fi
  if [ -d "$APP_SOURCE_DIR/Resources" ]; then
    rm -rf "$APP_SOURCE_DIR/Resources"
  fi
  APP_SOURCE_DIR="$APP_SOURCE_DIR/App/"
  echo "-----> Structure type: $STRUCTURE_TYPE"
fi

# The Iron scaffolding tool (https://github.com/iron-meteor/iron-cli) place the
# Meteor app in /app/ instead of in the root. So let's try the /app/ folder if
# there is no Meteor app in the root.
if [ ! -d "$APP_SOURCE_DIR/.meteor" ] && [ -d "$APP_SOURCE_DIR/app/.meteor" ]; then
  APP_SOURCE_DIR="$APP_SOURCE_DIR/app/"
fi
# Where we will install meteor. Has to be outside the APP_CHECKOUT_DIR.
METEOR_DIR=`mktemp -d "$BUILDPACK_DIR"/meteor-XXXX`
# Where we'll put things we compile.
COMPILE_DIR_SUFFIX=".meteor/heroku_build"
COMPILE_DIR="$APP_CHECKOUT_DIR"/"$COMPILE_DIR_SUFFIX"

# Create directories as needed.
mkdir -p "$APP_CHECKOUT_DIR" "$METEOR_DIR" "$COMPILE_DIR"

# Update the path so we get npm, etc.
PATH="$COMPILE_DIR/bin:$PATH"

#
# Install node
#
NODE_VERSION=`curl -sS --get https://semver.io/node/resolve/0.10.x`
echo "-----> Installing node v$NODE_VERSION"
NODE_URL="http://s3pository.heroku.com/node/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz"
curl -sS $NODE_URL -o - | tar -zxf - -C $COMPILE_DIR --strip 1
# Export some environment variables for npm to use when compiling stuff.
export npm_config_prefix="$COMPILE_DIR"
export CPATH="$COMPILE_DIR"/include
export CPPPATH="$CPATH"

#
# Install meteor
#
echo "-----> Installing meteor"
curl -sS https://install.meteor.com | HOME="$METEOR_DIR" /bin/sh
METEOR="$METEOR_DIR/.meteor/meteor" # The meteor binary.
# echo "-----> Updating meteor to release 1.3-cordova-beta.3"
# $METEOR update --release 1.3-cordova-beta.3

#
# Build the meteor app!
#
echo "-----> Bundling bundle"
cd $APP_SOURCE_DIR

# Now on to bundling. Don't put the bundle in $APP_CHECKOUT_DIR, or it will
# recurse, trying to bundle up its own bundling.
BUNDLE_DEST=`mktemp -d "$BUILDPACK_DIR/build-XXXX"`

# <hack issue="https://github.com/meteor/meteor/issues/2796>
# the root cause seems to be related to https://github.com/meteor/meteor/issues/2606
# Also remember to use 'heroku stack:set cedar-14' to allow certain recompiled
# packages to use the newer version memcpy that ships with a more recent version
# of glibc (contained in cedar-14)
if [ -n "${BUILDPACK_PRELAUNCH_METEOR+1}" ]; then
echo "-----> Pre-launching Meteor to create packages assets and prevent bundling from failing"
    HOME=$METEOR_DIR $METEOR remove-platform ios android
    HOME=$METEOR_DIR timeout -s9 60 $METEOR --settings settings.json || true
fi
# </hack>

echo "-----> Building Meteor with ROOT_URL: $ROOT_URL"
HOME=$METEOR_DIR $METEOR build --server $ROOT_URL --directory $BUNDLE_DEST
mv $BUNDLE_DEST/bundle "$COMPILE_DIR/app"
rmdir $BUNDLE_DEST

# If we use npm, run npm install.
if [ -e "$COMPILE_DIR"/app/programs/server/package.json ]; then
  cd "$COMPILE_DIR"/app/programs/server && npm install
fi

#
# Environment
#
# Add an export of PATH which includes our compile dir.
echo "-----> Adding PATH environment"
mkdir -p "$APP_CHECKOUT_DIR"/.profile.d
cat > "$APP_CHECKOUT_DIR"/.profile.d/path.sh <<EOF
  #!/bin/sh
  export PATH=\$HOME/$COMPILE_DIR_SUFFIX/bin:\$PATH
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$HOME/$COMPILE_DIR_SUFFIX/lib
EOF

#
# Extras
#

# source scripts in 'extra' dir, if any.  Create them for custom stuff like
# binary dependencies, phantomjs for spiderable, etc.
echo "-----> Running extras"
for file in `ls "$BUILDPACK_DIR"/extra | sort`; do
    . "$BUILDPACK_DIR"/extra/$file
done
